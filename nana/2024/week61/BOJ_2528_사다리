import java.io.*;
import java.util.*;

class Main {

    private static int N, L;
    private static int now, time;   // now: 현재 층 수
    private static List<Ladder> map;

    private static int up(int floor) {

        while (floor < N - 1) {
            Ladder now = map.get(floor);
            Ladder next = map.get(floor + 1);

            // 올라가지 못하는 경우 멈춘다 (겹치지 않음)
            // 아랫층의 시작점이 윗층의 끝점보다 클 경우
            // 아랫층의 끝점이 윗층의 시작점보다 작을 경우
            if (now.start > next.end || now.end < next.start) break;
            floor++;
        }

        return floor;
    }

    private static void move() {

        for (Ladder now : map) {

            if (now.dir == 0) { // ->
                now.start++;
                now.end++;
                if (now.end == L) now.dir = 1; // 벽에 닿으면 방향 전환
            } else if (now.dir == 1) { // <-
                now.start--;
                now.end--;
                if (now.start == 0) now.dir = 0;
            }

        }
    }


    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        L = Integer.parseInt(st.nextToken());

        map = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            // d = 0, 1
            // 0: ->, 1: <-
            int l = Integer.parseInt(st.nextToken());
            int d = Integer.parseInt(st.nextToken());

            if (d == 0) map.add(new Ladder(0, l, d));
            else if (d == 1) map.add(new Ladder(L - l, L, d));
        }

        now = 0;
        time = 0;

        while (now < N - 1) {

            now = up(now);
            if (now == N - 1) break;

            move();
            time++;
        }

        System.out.println(time);
    }

    public static class Ladder {
        int start, end, dir;

        public Ladder(int start, int end, int dir) {
            this.start = start;
            this.end = end;
            this.dir = dir;
        }
    }
}
