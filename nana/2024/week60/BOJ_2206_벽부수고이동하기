import java.util.*;
import java.io.*;

class Main {

    private static int N, M;
    private static int[][] map; // 1: 벽
    private static boolean[][][] isVisited; // 벽을 안 부순 경우 0: true, 벽 부순 경우 1: true
    private static int[][] delta = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

    private static void bfs() {

        Queue<Point> q = new ArrayDeque<>();

        // 첫번째 칸
        isVisited[0][0][0] = true;  // 벽을 부순 적 X
        q.add(new Point(0, 0, 1, false));

        while (!q.isEmpty()) {

            Point p = q.poll();

            if (p.x == N - 1 && p.y == M - 1) {
                System.out.println(p.count);
                return;
            }

            for (int[] d : delta) {
                int nx = p.x + d[0];
                int ny = p.y + d[1];

                if (nx < 0 || ny < 0 || nx >= N || ny >= M) continue;

                if (map[nx][ny] == 1) { // 벽인 경우

                    if (!p.broken) {
                        // 벽을 부순 적이 없다면 뿌순다
                        isVisited[nx][ny][1] = true;
                        q.add(new Point(nx, ny, p.count + 1, true));
                    }

                } else {
                    // 벽이 아닐 때
                    if (p.broken) {
                        // 벽을 부순 적이 있을 때
                        // 방문한 적 없으면 방문 처리[1]를 하고 큐에 추가
                        if (isVisited[nx][ny][1]) continue;

                        isVisited[nx][ny][1] = true;
                        q.add(new Point(nx, ny, p.count + 1, true));
                    } else {
                        // 벽을 부순 적이 없을 때
                        // 방문한 적 없으면 방문 처리[0]를 하고 큐에 추가
                        if (isVisited[nx][ny][0]) continue;

                        isVisited[nx][ny][0] = true;
                        q.add(new Point(nx, ny, p.count + 1, false));
                    }
                }
            }
        }

        System.out.println(-1);
    }

    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        isVisited = new boolean[N][M][2];

        for (int i = 0; i < N; i++) {
            String str = br.readLine();
            for (int j = 0; j < M; j++) {
                map[i][j] = str.charAt(j) - '0';
            }
        }

        bfs();
    }

    private static class Point {
        int x, y;
        int count;
        boolean broken;

        public Point(int x, int y, int count, boolean broken) {
            this.x = x;
            this.y = y;
            this.count = count;
            this.broken = broken;
        }
    }
}
