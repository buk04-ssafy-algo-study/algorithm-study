import java.io.*;
import java.util.*;

class Main {

    private static int N, ans;
    private static int[][] seat;
    private static int[] order;
    private static List<Integer>[] prefer;
    private static PriorityQueue<Student> pq;
    private static int[][] delta = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    private static void sit(int student) {

        // 한 학생이 지날 때 마다 새로운 큐를 생성
        // 그때그때 조건에 가장 적합한 칸을 찾아서 앉히기
        pq = new PriorityQueue<>();

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (seat[i][j] == 0) {
                    // 빈 자리만 검사
                    find(i, j, student);
                }
            }
        }

        // 가장 위의 값에 앉히기
        seat[pq.peek().x][pq.peek().y] = student;
    }

    private static void find(int x, int y, int student) {
        int empty_count = 0;
        int friend_count = 0;

        for (int[] d : delta) {
            int nx = x + d[0];
            int ny = y + d[1];

            if (!possible(nx, ny)) continue;

            if (seat[nx][ny] == 0) empty_count++;
            if (prefer[student].contains(seat[nx][ny])) friend_count++;
        }

        pq.add(new Student(x, y, empty_count, friend_count));
    }

    private static void answer() {
        //  0이면 학생의 만족도는 0, 1이면 1, 2이면 10, 3이면 100, 4이면 1000이다.
        ans = 0;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {

                int count = 0;

                for (int[] d : delta) {
                    int di = i + d[0];
                    int dj = j + d[1];

                    if (!possible(di, dj)) continue;

                    if (prefer[seat[i][j]].contains(seat[di][dj])) count++;
                }

                if (count == 1) ans += 1;
                else if (count == 2) ans += 10;
                else if (count == 3) ans += 100;
                else if (count == 4) ans += 1000;
            }
        }
    }

    private static boolean possible(int x, int y) {
        return x >= 0 && y >= 0 && x < N && y < N;
    }

    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());

        order = new int[N * N + 1];   // 학생 순서
        seat = new int[N][N];

        prefer = new List[N * N + 1];
        for (int i = 1; i <= N * N; i++) {
            prefer[i] = new ArrayList<>();
        }

        for (int i = 1; i <= N * N; i++) {
            st = new StringTokenizer(br.readLine());
            int now = Integer.parseInt(st.nextToken());
            order[i] = now;

            for (int j = 0; j < 4; j++) {
                prefer[now].add(Integer.parseInt(st.nextToken()));
            }
        }

        // 결국 제일 처음 학생은 (1, 1)에 앉게 되어있다
        seat[1][1] = order[1];

        for (int i = 2; i <= N * N; i++) {
            sit(order[i]);
        }

        answer();

        System.out.println(ans);
    }

    public static class Student implements Comparable<Student> {
        int x, y;
        int empty, friend;

        public Student(int x, int y, int empty, int friend) {
            this.x = x;
            this.y = y;
            this.empty = empty;
            this.friend = friend;
        }

        // 비어있는 칸 중에서 좋아하는 학생이 인접한 칸에 가장 많은 칸으로 자리를 정한다.
        // 인접한 칸 중에서 비어있는 칸이 가장 많은 칸으로 자리를 정한다.
        // 행의 번호가 가장 작은 칸으로, 열의 번호가 가장 작은 칸으로 자리를 정한다.
        @Override
        public int compareTo(Student o) {
            if (o.friend == this.friend) {
                if (o.empty == this.empty) {
                    if (this.x == o.x) {
                        return this.y - o.y;
                    }
                    return this.x - o.x;
                }
                return o.empty - this.empty;
            }
            return o.friend - this.friend;
        }
    }
}
