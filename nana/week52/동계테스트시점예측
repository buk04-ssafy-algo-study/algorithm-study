import java.io.*;
import java.util.*;

public class Main {

    private static int N, M;
    private static int[][] map, isVisited;
    private static int ice, time;
    private static int[][] delta = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    private static Queue<Point> q;

    private static void bfs(){

        q = new ArrayDeque<>();

        q.add(new Point(0, 0));
        isVisited[0][0] = 1;

        while(!q.isEmpty()){
            Point p = q.poll();

            for(int[] d: delta){
                int nx = p.x+d[0];
                int ny = p.y+d[1];

                if(nx<0||nx>=N||ny<0||ny>=M) continue;

                if(map[nx][ny] == 1){
                    isVisited[nx][ny] += 1;
                } else if(isVisited[nx][ny] == 0){
                    q.add(new Point(nx, ny));
                    isVisited[nx][ny] = 1;
                }
            }
        }
        
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        time = 0;

        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<M; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        while(true){

            ice = 0;
            isVisited = new int[N][M];

            for(int i=0; i<N; i++){
                for(int j=0; j<M; j++){
                    if(map[i][j] == 1){
                        ice++;
                        bfs();
                    }
                }
            }

            if(ice == 0){
                System.out.println(time);
                break;
            }

                        for(int i=0; i<N; i++){
                for(int j=0; j<M; j++){
                    if(isVisited[i][j]>=2){
                        // 두 면 이상 닿은 곳이면 얼음이 녹음
                        map[i][j] = 0;
                    }
                }
            }

            time++;
        }
    }

    private static class Point{
        int x, y;
    
        public Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
}
