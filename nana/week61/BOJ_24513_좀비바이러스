import java.io.*;
import java.util.*;

class Main {

    private static int N, M, time;
    private static int virus_1, virus_2, virus_3;
    private static Point v1, v2;
    private static int[][] map, isVisited;
    private static int[][] delta = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};

    private static void bfs() {

        Queue<Point> q1 = new ArrayDeque<>();
        Queue<Point> q2 = new ArrayDeque<>();

        q1.add(new Point(v1.r, v1.c));
        q2.add(new Point(v2.r, v2.c));

        while (!q1.isEmpty() || !q2.isEmpty()) {

            time++; // 이번 사이클이 몇 시간째인지 체크

            int q1_size = q1.size();
            int q2_size = q2.size();

            for (int i = 0; i < q1_size; i++) {
                // 1번 바이러스부터
                Point p = q1.poll();

                if (map[p.r][p.c] == 3) continue;

                for (int[] d : delta) {
                    int nr = p.r + d[0];
                    int nc = p.c + d[1];

                    if (nr >= 0 && nr < N && nc >= 0 && nc < M) {

                        if (map[nr][nc] == 0) {
                            // 아직 감염되지 않은 바이러스면
                            map[nr][nc] = 1;
                            q1.add(new Point(nr, nc));
                            // 이번 사이클 내에 1번 바이러스에 감염 시 방문 배열에 시간 저장
                            isVisited[nr][nc] = time;
                            virus_1++;
                        }
                    }
                }
            }

            for (int i = 0; i < q2_size; i++) {
                Point p = q2.poll();

                for (int[] d : delta) {
                    int nr = p.r + d[0];
                    int nc = p.c + d[1];

                    if (nr >= 0 && nr < N && nc >= 0 && nc < M) {

                        if (map[nr][nc] == 0) {
                            // 아직 감염되지 않은 바이러스면
                            map[nr][nc] = 2;
                            q2.add(new Point(nr, nc));
                            virus_2++;
                        } else if (map[nr][nc] == 1 && isVisited[nr][nc] == time) {
                            // 1번 바이러스에 감염 + 이번 사이클에서 감염된 경우 
                            map[nr][nc] = 3;
                            virus_3++;
                            // 3번 바이러스는 더이상 퍼지지 않기 때문에 큐에 추가하지 않아도 됨
                        }
                    }
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        time = 0;

        map = new int[N][M];
        isVisited = new int[N][M];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());

                if (map[i][j] == 1) {
                    v1 = new Point(i, j);
                } else if (map[i][j] == 2) {
                    v2 = new Point(i, j);
                }
            }
        }

        // 제일 먼저 감염된 마을이 하나씩 존재
        virus_1 = 1;
        virus_2 = 1;
        virus_3 = 0;

        bfs();

        System.out.printf("%d %d %d", virus_1 - virus_3, virus_2, virus_3);
    }

    public static class Point {
        int r, c;

        public Point(int r, int c) {
            this.r = r;
            this.c = c;
        }
    }
}
