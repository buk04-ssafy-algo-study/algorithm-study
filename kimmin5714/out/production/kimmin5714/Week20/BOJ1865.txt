BOJ1865

1. 문제 설명
- N개 지점
- 지점 사이에 M개 도로(방향 x)
- 지점 사이에 W개 웜홀(방향 o)
- 지점(시작) -> 웜홀 -> 지점(도착) : 시간이 뒤로 감

지점(시작) -> ~~~ -> 지점(도착=시작지점) : 도착 시점이 출발 시간보다 빠른 경우가 있는지?

2. 문제 풀이 접근
-  웜홀에서 시간이 줄어든다 = 음의 가중치인 간선
- v에서 v로 가는 경로의 가중치 합이 줄어드는 경우가 있는지?
- 정점 v에서 v로 오는 음수 사이클이 하나라도 있으면 YES 출력
- 음수 싸이클이란?
  
3. 알고리즘 (https://www.youtube.com/watch?v=Ppimbaxm8d8)
ㅇ 벨만 포드 
- 다익스트라랑 유사한 최단 거리 알고리즘
- 다익스트라는 음수 가중치x, 벨만포드는 음수 가중치도 가능
- 다익스트라는 방문하지 않은 노드 중에서 가장 가중치 적은 노드 선택하면서 최단 거리 구해나감
	-> 음수 간선 고려 못함, 시간 빠름
- 벨만 포드는 매번 모든 간선 전부 확인하여 경로 선택 
	-> 음수 간선 고려 가능, 시간 느림

ㅇ수행 과정
1. 출발 노드 설정
2. 최단 거리 테이블 초기화
3. (정점 수 -1)만큼 반복
	-> 모든 간선 탐색하면서 시작 정점에서 다른 정점까지 거리가 INF 아니면 거리 갱신
	1. 모든 간선 하나씩 확인
	2. 각 간선 거쳐 다른 노드로 가는 비용 계산하면서 테이블 갱신
4. 음수 싸이클 포함 여부 확인 방법 : 3번 한 번 더 수행(총 정점 수 만큼 수행)
	-> 테이블 갱신된다면 음수 간선 존재

* V-1번 진행했을 때 최단 거리가 확정되는 이유
- A에서 B로 가는 경로 중에서 최악의 경우 : 최대 V-1개 정점을 지나는 경우이기 때문

*V번 진행했을 때 음수 싸이클 확인할 수 있는 이유
- V개 정점을 지나는 경우는 중복되는 정점을 지난다는 것
- 중복되는 정점을 이용했을 때 최단 거리가 갱신된다 = 음의 싸이클이 있다는 것